var tipuesearch = {"pages": [{'title': 'About', 'text': '\xa0 https://github.com/yuhao-08/cp2023 （個人倉儲） \n \xa0 https://github.com/41223133/cp2023_ag3  (小組倉儲) \n', 'tags': '', 'url': 'About.html'}, {'title': 'W5', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n \n \n \n // 包含標準輸出入程式庫的標頭文件 \n // https://blog.csdn.net/weixin_38468077/article/details/101069365 \n // http://www.gnuplot.info/demo/ \n // https://github.com/sysprog21/rv32emu \n // https://github.com/sysprog21/semu  \n // https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3 \n // https://cs61c.org/fa23/ \n // https://greenteapress.com/wp/think-python-2e/ \n // https://github.com/ecalvadi/c99-examples \n // https://github.com/gouravthakur39/beginners-C-program-examples \n // https://github.com/ergenekonyigit/Numerical-Analysis-Examples \n // https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf \n // https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf \n // https://jsommers.github.io/cbook/cbook.pdf \n // https://jsommers.github.io/cbook/index.html \n // http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf \n // http://cslibrary.stanford.edu/101/EssentialC.pdf \n // https://publications.gbdirect.co.uk/c_book/ \n // https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf \n // ***** execute on replit  \n // cd downloads \n // cc gnuplot_ex1.c -o gnuplot_ex1 \n // ./gnuplot_ex1 \n #include <stdio.h> \n \xa0\xa0\xa0 \xa0 \n // 主函式 \n int   main() { \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal png font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'./../images/gnuplot_ex1.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "plot sin(x)" ); \n \xa0\xa0\xa0\xa0 // Close popen \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W5.html'}, {'title': '國旗', 'text': '', 'tags': '', 'url': '國旗.html'}, {'title': '台灣', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號\xa0 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n \n \n \n #include < stdio.h > \n #include < gd.h > \n #include < math.h > \n \xa0 \n void draw_roc_flag(gdImagePtr img); \n void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue); \n \xa0 \n int main() { \n \xa0\xa0\xa0\xa0 // width 3: height 2 \n \xa0\xa0\xa0\xa0 int width = 1200; \n \xa0\xa0\xa0\xa0 int height = (int)(width*2.0 / 3.0); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_roc_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE *outputFile = fopen("./roc_flag.png", "wb"); \n \xa0\xa0\xa0\xa0 if (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr, "Error opening the output file.\\n"); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return 0; \n } \n \xa0 \n void draw_roc_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int red, white, blue; \n \xa0\xa0\xa0\xa0 int center_x = (int)(width/4); \n \xa0\xa0\xa0\xa0 int center_y = (int)(height/4); \n \xa0\xa0\xa0\xa0 int sun_radius = (int)(width/8); \n \xa0 \n \xa0\xa0\xa0\xa0 // Colors for the flag \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 242, 0, 0); // Red color \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255); // White stripes \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 41, 204); // Blue \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製紅色矩形區域 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製藍色矩形區域 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製太陽 \n \xa0\xa0\xa0\xa0 draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue); \n } \n void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) { \n \xa0\xa0\xa0\xa0 float angle = 0; \n \xa0\xa0\xa0\xa0 int numRays = 12; // 光芒的數量 \n \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points[3]; // 三個頂點的陣列 \n \xa0 \n \xa0\xa0\xa0\xa0 for (int i = 0; i < numRays; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 angle = i * (2 * M_PI / numRays); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 float x1 = center_x + cos(angle) * sun_radius; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 float y1 = center_y + sin(angle) * sun_radius; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 調整兩個底邊頂點的位置 \n \xa0\xa0\xa0\xa0\xa0\xa0 float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5); \n \xa0\xa0\xa0\xa0\xa0\xa0 float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5); \n \xa0\xa0\xa0\xa0\xa0\xa0 float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5); \n \xa0\xa0\xa0\xa0\xa0\xa0 float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 設定多邊形的三個頂點 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[0].x = (int)x1; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[0].y = (int)y1; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[1].x = (int)x2; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[1].y = (int)y2; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[2].x = (int)x3; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[2].y = (int)y3; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 3, white); \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0 //外圈 \n \xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue); \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製太陽內部 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white); \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '台灣.html'}, {'title': '美國', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號\xa0 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void draw_usa_flag(gdImagePtr img); \n void draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color, double rotation_angle); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width  =   800 ; \n \xa0\xa0\xa0\xa0 int   height  =   ( int )(width  /   1.9 ); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img  =   gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img,  0 ); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_usa_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE   * outputFile  =   fopen( "./../images/usa_flag.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile  = =   NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr,  "打开输出文件时出错。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1 ; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile,  9 ); \n \xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0 ; \n } \n \xa0 \n void draw_usa_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width  =   gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height  =   gdImageSY(img); \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 / /   国旗颜色 \n \xa0\xa0\xa0\xa0 red  =   gdImageColorAllocate(img,  178 ,  34 ,  52 );  / /   红色条纹 \n \xa0\xa0\xa0\xa0 white  =   gdImageColorAllocate(img,  255 ,  255 ,  255 );  / /   白色条纹 \n \xa0\xa0\xa0\xa0 blue  =   gdImageColorAllocate(img,  60 ,  59 ,  110 );  / /   蓝色矩形 \n \xa0 \n \xa0\xa0\xa0\xa0 int   stripe_height  =   33   ; \n \xa0\xa0\xa0\xa0 int   stripe_width  =   width ; \n \xa0\xa0\xa0\xa0 int   star_size  =   ( int )( 0.0308   *   height);  / /   星星大小 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   y  =   0 ; y < height; y  + =   stripe_height) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (y  /   stripe_height  %   2   = =   0 ) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img,  0 , y, stripe_width, y  +   stripe_height, red); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img,  0 , y, stripe_width, y  +   stripe_height, white); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img,  0 ,  0 , width  *   2   /   5 , stripe_height  *   698   /   100 , blue); \n \xa0 \n \xa0\xa0\xa0\xa0 int   star_spacing_x  =   ( int )( 0.129   *   height);  / /   横向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_spacing_y  =   ( int )( 0.054   *   height);  / /   纵向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_start_x  =   ( int )( 0.125   *   height);  / /   星星的起始X位置 \n \xa0\xa0\xa0\xa0 int   star_start_y  =   ( int )( 0.06   *   height);  / /   星星的起始Y位置 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   row  =   0 ; row <  9 ; row + + ) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   starsPerRow  =   (row  %   2   = =   0 ) ?  6   :  5 ; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 / /   计算 2 、 4 、 6 和 8 排星星的偏移量 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   offset_x  =   (row  %   2   = =   0 ) ? star_spacing_x  /   - 2   :  0 ; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   ( int   star  =   0 ; star < starsPerRow; star + + ) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x  =   star_start_x  +   star  *   star_spacing_x  +   offset_x; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 / /   旋转角度（以弧度为单位） \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double rotation_angle  =   M_PI  /   5 ;  / /   忘記多少度的旋转 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y  =   star_start_y  +   row  *   star_spacing_y; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 draw_star(img, x, y, star_size, white, rotation_angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \n void draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color, double rotation_angle) { \n \xa0\xa0\xa0\xa0 gdPoint points[ 10 ]; \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   i  =   0 ; i <  10 ; i + + ) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double angle  =   M_PI  /   2   +   i  *   2   *   M_PI  /   10   +   rotation_angle; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   radius  =   (i  %   2   = =   0 ) ? size : size  /   2 ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x  =   x  +   radius  *   cos(angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y  =   y  +   radius  *   sin(angle); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 / /   用指定的颜色填充星星 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points,  10 , color); \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '美國.html'}, {'title': '日本', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \xa0 \n void   draw_japan_flag(gdImagePtr img); \n void   draw_red_sun(gdImagePtr img,  int   x,  int   y,  int   size,  int   color); \n \xa0 \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   originalWidth = 1200; \n \xa0\xa0\xa0\xa0 int   originalHeight = ( int )(originalWidth * 2.0 / 3.0); \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 draw_japan_flag(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 新的宽度和高度以适应 "images" 文件夹 \n \xa0\xa0\xa0\xa0 int   newWidth = 600; \n \xa0\xa0\xa0\xa0 int   newHeight = ( int )(newWidth * 2.0 / 3.0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 创建新图像并进行缩放 \n \xa0\xa0\xa0\xa0 gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(resizedImage, 0); \n \xa0\xa0\xa0\xa0 gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight); \n \xa0 \xa0 \n \xa0\xa0 FILE   *outputFile =  fopen ( "./../images/japan_flag.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePng(resizedImage, outputFile); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 gdImageDestroy(resizedImage); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \xa0 \n void   draw_japan_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 创建一个白色背景 \n \xa0\xa0\xa0\xa0 int   white = gdImageColorAllocate(img, 255, 255, 255); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 绘制红色圆圈（太阳） \n \xa0\xa0\xa0\xa0 int   red = gdImageColorAllocate(img, 255, 0, 0); \n \xa0\xa0\xa0\xa0 int   center_x = width / 2; \n \xa0\xa0\xa0\xa0 int   center_y = height / 2; \n \xa0\xa0\xa0\xa0 int   radius = ( int )((width * 2) / 3); \n \xa0\xa0\xa0\xa0 draw_red_sun(img, center_x, center_y, radius, red); \n } \n \xa0 \xa0 \n void   draw_red_sun(gdImagePtr img,  int   x,  int   y,  int   size,  int   color) { \n \xa0\xa0 // 減小 size 的值,例如將他的值減半 \n \xa0\xa0 size = size / 2; \n \xa0\xa0\xa0\xa0 gdImageArc(img, x, y, size, size, 0, 360, color); \n \xa0\xa0\xa0\xa0 gdImageFillToBorder(img, x, y, color, color); \n } \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '日本.html'}, {'title': '中國', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n \n \n \n #include < stdio.h > \n #include < gd.h > \n #include < math.h > \n \xa0 \xa0 \n void draw_proc_flag(gdImagePtr img); \n \xa0 \xa0 \n int main() { \n \xa0\xa0\xa0\xa0 int width = 300; // 國旗寬度 \n \xa0\xa0\xa0\xa0 int height = 200; // 國旗高度 \n \xa0 \xa0 \n \xa0 \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr im = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(im, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 draw_proc_flag(im); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE *outputFile = fopen("./../images/proc_flag.png", "wb"); \n \xa0\xa0\xa0\xa0 if (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr, "打開輸出檔案時出錯。\\n"); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(im, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(im); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return 0; \n } \n \xa0 \xa0 \n // 聲明 draw_star 函數 \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n \xa0 \xa0 \n void draw_proc_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int red, yellow; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 國旗顏色 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景 \n \xa0\xa0\xa0\xa0 yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星 \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 畫紅色背景 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 設置星星的大小和位置 \n \xa0\xa0\xa0\xa0 int star_size = (int)(0.28 * height); \n \xa0\xa0\xa0\xa0 int star_x = (int)(0.165 * width); \n \xa0\xa0\xa0\xa0 int star_y = (int)(0.265 * height); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 畫大星星 \n \xa0\xa0\xa0\xa0 draw_star(img, star_x, star_y, star_size, yellow, 11.0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 繪製小星星，位置根據實際國旗比例計算 \n \xa0\xa0\xa0\xa0 double radius = 0.15 * height; \n \xa0\xa0\xa0\xa0 double angle = 360 / 7 * M_PI / 179.0; \n \xa0\xa0\xa0\xa0 double rotation = -M_PI / 7.5; \n \xa0\xa0\xa0\xa0 int cx = (int)(0.32 * width); \n \xa0\xa0\xa0\xa0 int cy = (int)(0.27 * height); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 for (int i = -1; i < 3; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int x = (int)(cx + radius * cos(i * angle + rotation)); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int y = (int)(cy + radius * sin(i * angle + rotation)); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 draw_star(img, x, y, 19, yellow, M_PI / 5.0); \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \xa0 \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) { \n \xa0\xa0\xa0\xa0 gdPoint points[10]; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 計算星形的五個外點和五個內點 \n \xa0\xa0\xa0\xa0 double outer_radius = size / 2; \n \xa0\xa0\xa0\xa0 double inner_radius = size / 6; \n \xa0\xa0\xa0\xa0 double angle = M_PI / 5.0; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 for (int i = 0; i < 10; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double radius = (i % 2 == 0) ? outer_radius : inner_radius; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double theta = rotation_angle + i * angle; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x + radius * cos(theta); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y + radius * sin(theta); \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 使用 gdImageFilledPolygon 繪製星形 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 10, color); \n } \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '中國.html'}, {'title': '英國', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n 114 \n 115 \n 116 \n 117 \n 118 \n 119 \n 120 \n 121 \n 122 \n 123 \n 124 \n 125 \n 126 \n 127 \n 128 \n 129 \n 130 \n 131 \n 132 \n 133 \n 134 \n 135 \n 136 \n 137 \n 138 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_uk_flag(gdImagePtr img); \n void   fillTriangle(gdImagePtr img,  int   x1,  int   y1,  int   x2,  int   y2,  int   x3,  int   y3,  int   color); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 // 设置国旗的宽和高 \n \xa0\xa0\xa0\xa0 int   width = 1200; \n \xa0\xa0\xa0\xa0 int   height = width / 2; \n \xa0 \n \xa0\xa0\xa0\xa0 // 创建图像 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制英国国旗 \n \xa0\xa0\xa0\xa0 draw_uk_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 // 将图像保存到文件 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/uk_flag.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "打开输出文件时发生错误。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \n \n void   draw_uk_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0 \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 204, 0, 0);\xa0\xa0\xa0\xa0\xa0\xa0  // 红色 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255);  // 白色 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 153);\xa0\xa0\xa0\xa0\xa0  // 蓝色 \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, blue); \n \xa0 \n \xa0 \n \xa0\xa0 int   x1, y1, x2, y2, x3, y3; \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 int   line_thickness = 100; \n \xa0\xa0\xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0\xa0\xa0\xa0 int   x1, y1, x2, y2, x3, y3; \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制白色斜线 \n \xa0\xa0\xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 600; \n \xa0\xa0\xa0\xa0 x2 = 1200; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 0; \n \xa0\xa0\xa0\xa0 x2 = 1200; \n \xa0\xa0\xa0\xa0 y2 = 600; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 int   line_thickness = 33; \n \xa0\xa0\xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制红色斜线 \n \xa0\xa0\xa0\xa0 x1 = 566; \n \xa0\xa0\xa0\xa0 y1 = 300; \n \xa0\xa0\xa0\xa0 x2 = 1166; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 1233; \n \xa0\xa0\xa0\xa0 y1 = 600; \n \xa0\xa0\xa0\xa0 x2 = 633; \n \xa0\xa0\xa0\xa0 y2 = 300; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 566; \n \xa0\xa0\xa0\xa0 y1 = 300; \n \xa0\xa0\xa0\xa0 x2 = -33; \n \xa0\xa0\xa0\xa0 y2 = 0; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0 \n \xa0\xa0\xa0\xa0 x1 = 600; \n \xa0\xa0\xa0\xa0 y1 = 316.5; \n \xa0\xa0\xa0\xa0 x2 = 0; \n \xa0\xa0\xa0\xa0 y2 = 616.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red); \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0 int   line_thickness = 33; \n \xa0\xa0 gdImageSetThickness(img, line_thickness); \n \xa0 \n \xa0\xa0 int   x1, y1, x2, y2, x3, y3; \n \xa0 \n \xa0\xa0 // 绘制\xa0 斜线 \n \xa0\xa0 x1 = 0; \n \xa0\xa0 y1 = 600; \n \xa0\xa0 x2 = 1200; \n \xa0\xa0 y2 = 0; \n \xa0\xa0 gdImageLine(img, x1, y1, x2, y2, red ); \n \xa0 \n \xa0 \n \xa0\xa0 x1 = 1200; \n \xa0\xa0\xa0\xa0 y1 = 16.5; \n \xa0\xa0\xa0\xa0 x2 = 600; \n \xa0\xa0\xa0\xa0 y2 = 316.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0 \n \xa0\xa0 x1 = 0; \n \xa0\xa0\xa0\xa0 y1 = 583.5; \n \xa0\xa0\xa0\xa0 x2 = 600; \n \xa0\xa0\xa0\xa0 y2 = 283.5; \n \xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); \n \xa0 \n \xa0 \n \xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制白色十字 \n \xa0\xa0\xa0\xa0 int   cross_width = width / 32; \n \xa0\xa0\xa0\xa0 int   cross_arm_width = width / 32; \n \xa0\xa0\xa0\xa0 int   center_x = width / 2; \n \xa0\xa0\xa0\xa0 int   center_y = height / 2; \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white); \n \xa0 \n \xa0\xa0\xa0\xa0 // 绘制红色十字 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red); \n } \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '英國.html'}, {'title': '法國', 'text': '#include <stdio.h> #include <gd.h> \n void draw_france_flag(gdImagePtr img); \n int main() {  // Flag dimensions  int width = 900;  int height = 600; \n // Create a true-color GD image  gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n // Draw the France flag on the image  draw_france_flag(img); \n // Output the image to a file  FILE *outputFile = fopen("./../images/france_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n void draw_france_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img); \n // Define France flag colors  int blue = gdImageColorAllocate(img, 0, 35, 149);  int white = gdImageColorAllocate(img, 255, 255, 255);  int red = gdImageColorAllocate(img, 239, 65, 53); \n // Calculate stripe widths  int stripe_width = width / 3; \n // Fill the background with blue color  gdImageFilledRectangle(img, 0, 0, width, height, blue); \n // Draw three vertical stripes in the order: blue, white, red  gdImageFilledRectangle(img, 0, 0, stripe_width, height, blue);  gdImageFilledRectangle(img, stripe_width, 0, stripe_width * 2, height, white);  gdImageFilledRectangle(img, stripe_width * 2, 0, width, height, red); } \n \n \n \n \n \n \n', 'tags': '', 'url': '法國.html'}, {'title': 'GD圖', 'text': '', 'tags': '', 'url': 'GD圖.html'}, {'title': '1-1', 'text': '', 'tags': '', 'url': '1-1.html'}, {'title': '2.', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \xa0 \n // Declare the rotation function \n void   rotateFilledPolygon( int   x_orig,  int   y_orig,  double   rotation_ang, gdPoint *points,  int   num_points) { \n \xa0\xa0\xa0\xa0 int   i; \n \xa0\xa0\xa0\xa0 double   angle_rad = rotation_ang * M_PI / 180.0; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 for   (i = 0; i < num_points; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x = points[i].x - x_orig; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y = points[i].y - y_orig; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x_orig + ( int )(x *  cos (angle_rad) - y *  sin (angle_rad)); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y_orig + ( int )(x *  sin (angle_rad) + y *  cos (angle_rad)); \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width = 800; \n \xa0\xa0\xa0\xa0 int   height = 600; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/hellogd2.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 int   red = gdImageColorAllocate(img, 255, 0, 0); \n \xa0\xa0\xa0\xa0 int   blue = gdImageColorAllocate(img, 0, 0, 255); \n \xa0\xa0\xa0\xa0 int   black = gdImageColorAllocate(img, 0, 0, 0); \n \xa0\xa0\xa0\xa0 int   white = gdImageColorAllocate(img, 255, 255, 255); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, white); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, ( int )width / 4, ( int )height / 4, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, ( int )width * 3 / 4, ( int )height / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageEllipse(img, ( int )width * 3 / 4, ( int )height * 3 / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageLine(img, ( int )width / 2, ( int )height / 2, ( int )width / 2, ( int )height / 2 + 100, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points[4]; \n \xa0\xa0\xa0\xa0 points[0].x = ( int )width / 4; \n \xa0\xa0\xa0\xa0 points[0].y = ( int )height * 3 / 4; \n \xa0\xa0\xa0\xa0 points[1].x = points[0].x + 100; \n \xa0\xa0\xa0\xa0 points[1].y = points[0].y; \n \xa0\xa0\xa0\xa0 points[2].x = points[1].x; \n \xa0\xa0\xa0\xa0 points[2].y = points[1].y + 100; \n \xa0\xa0\xa0\xa0 points[3].x = points[2].x - 100; \n \xa0\xa0\xa0\xa0 points[3].y = points[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function multiple times \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 4; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 rotateFilledPolygon(( int )width / 4 + 50, ( int )height * 3 / 4 + 50, 30.0, points, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImagePolygon(img, points, 4, black); \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points2[4]; \n \xa0\xa0\xa0\xa0 points2[0].x = ( int )width / 3; \n \xa0\xa0\xa0\xa0 points2[0].y = ( int )height / 2; \n \xa0\xa0\xa0\xa0 points2[1].x = points2[0].x + 100; \n \xa0\xa0\xa0\xa0 points2[1].y = points2[0].y; \n \xa0\xa0\xa0\xa0 points2[2].x = points2[1].x; \n \xa0\xa0\xa0\xa0 points2[2].y = points2[1].y + 100; \n \xa0\xa0\xa0\xa0 points2[3].x = points2[2].x - 150; \n \xa0\xa0\xa0\xa0 points2[3].y = points2[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function multiple times \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 12; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 rotateFilledPolygon(500, 200, 30.0, points2, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points2, 4, red); \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n \xa0 \n', 'tags': '', 'url': '2..html'}, {'title': 'Note', 'text': '\n', 'tags': '', 'url': 'Note.html'}, {'title': 'ssh', 'text': '下載putty \n 在putty資料夾內開啟puttygen.exe做一把金鑰匙 \n 將key儲存在github帳號內(開啟設定點選ssh) \n 回到puttygen.exe按save private key即可 \n 接著再開啟putty \n Host Name輸入github.com \n Saved Sessions輸入自己的學號 \n 點選proxy改設定 \n \n 再點選ssh內的Auth裡面Credentials \n \n 就完成了 \n', 'tags': '', 'url': 'ssh.html'}, {'title': 'key', 'text': '使用puttygen.exe定位主機位置獲得key(點Generate) \n \n 點選之後並在視窗內移動 \n \n 複製ssh-rsa的內容 全部 \n 再到github帳號setting的ssh and gpg keys新增一把key \n 把剛剛複製的key-rsa貼上之後點save private key 即可! \n 儲存到 tinyc-data-home \xa0 名稱:學號 \n 將鑰使存在自己的usb。 \n', 'tags': '', 'url': 'key.html'}, {'title': 'ANSIC', 'text': '1. \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n #include < stdio.h > \n void main() \n { \n \xa0 /* 印出 Hello */ \n printf("Hello World!"); \n } \n \n \n \n \n \n \n 2. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n #include < stdio.h > \n void main() \n { \n float a = 0.5; \n double b = 1.2; \n int c = 3; \n b = b + a + c; \n /* 輸出 a, b, c 到螢幕 */ \n printf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c ); \n } \n \n \n \n \n \n \n \n \n 3. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n \n \n \n #define _CRT_SECURE_NO_WARNINGS \n #include < stdio.h > \n \xa0 \xa0 \n int main() \n { \n \xa0\xa0\xa0\xa0 float this_is_a_number1, this_is_a_number2, total; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 printf("請輸入一個數字: \\n"); \n \xa0\xa0\xa0\xa0 scanf("%f", &this_is_a_number1); /* 讀取第一個浮點數 */ \n \xa0\xa0\xa0\xa0 printf("您輸入了 %f\\n", this_is_a_number1); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 printf("請輸入另一個數字: \\n"); \n \xa0\xa0\xa0\xa0 scanf("%f", &this_is_a_number2); /* 讀取第二個浮點數 */ \n \xa0\xa0\xa0\xa0 printf("您輸入了 %f\\n", this_is_a_number2); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 total = this_is_a_number1 / this_is_a_number2; /* 將兩個數字相除 */ \n \xa0\xa0\xa0\xa0 printf("商為 %f\\n", total); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return 0; \n } \n \n \n \n \n \n \n \n \n 4. \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n \n \n \n #include< stdio.h > \n void main() \n { \n int a,b; \n a = 15; \n b = 1; \n printf("%d \\n", a | b ); /* a OR b */ \n printf("%d \\n", a & b ); /* a AND b */ \n printf("%d \\n", a ^ b ); /* a XOR b */ \n printf("%d \\n", a <<  1   ); /* a 位元左移 1 位 */ \n printf("%d \\n", a >> 1 ); /* a 位元右移一位 */ \n printf("%d \\n", ~a ); /* A 的補數運算 */ \n } \n \n \n \n \n \n \n \n \n 5. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n \n \n \n #include <stdio.h> \n int   main() \n { \n /* 印出 Hello World! Bye Bye */ \n printf ( "Hello World! " ); \n printf ( "Bye " ); \n printf ( "Bye" ); \n return   0; \n } \n \n \n \n \n \n \n \n \n 6. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n \n \n \n #include <stdio.h> \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   a = 64; \n \xa0\xa0\xa0\xa0 int   b = 0x40; \n \xa0\xa0\xa0\xa0 long   c = 64L; \n \xa0 \n \xa0\xa0\xa0\xa0 printf ( "%d,%d,%ld" , a, b, c);\xa0  // 使用 %ld 來打印 long 整數型別的變數 c \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n 7. 將指定的日期轉換為年、週和日 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n \n \n \n #include <stdio.h> \n \xa0 \n int   main() \n { \n \xa0\xa0\xa0\xa0 int   days, years, weeks; \n \xa0 \n \xa0\xa0\xa0\xa0 days = 1329;  // Total number of days \n \xa0 \n \xa0\xa0\xa0\xa0 // Converts days to years, weeks and days \n \xa0\xa0\xa0\xa0 years = days/365;  // Calculate years \n \xa0\xa0\xa0\xa0 weeks = (days % 365)/7;  // Calculate weeks \n \xa0\xa0\xa0\xa0 days = days - ((years*365) + (weeks*7));  // Calculate remaining days \n \xa0 \n \xa0\xa0\xa0\xa0 // Print the results \n \xa0\xa0\xa0\xa0 printf ( "Years: %d\\n" , years); \n \xa0\xa0\xa0\xa0 printf ( "Weeks: %d\\n" , weeks); \n \xa0\xa0\xa0\xa0 printf ( "Days: %d \\n" , days); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n 8. 接受使用者提供的兩個整數併計算這兩個整數的和 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n \n \n \n #include <stdio.h> \n int   main()  \n { \n \xa0\xa0\xa0\xa0 int   x, y, sum;  // Declare variables for two integers and their sum \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Prompt user for input and store in \'x\' \n \xa0\xa0\xa0\xa0 printf ( "\\nInput the first integer: " );  \n \xa0\xa0\xa0\xa0 scanf ( "%d" , &x); \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Prompt user for input and store in \'y\' \n \xa0\xa0\xa0\xa0 printf ( "\\nInput the second integer: " ); \n \xa0\xa0\xa0\xa0 scanf ( "%d" , &y); \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 sum = x + y;  // Calculate the sum of \'x\' and \'y\' \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Print the sum \n \xa0\xa0\xa0\xa0 printf ( "\\nSum of the above two integers = %d\\n" , sum); \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0;  // Indicate successful execution \n } \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'w13', 'text': '', 'tags': '', 'url': 'w13.html'}, {'title': '1-2', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n \n \n \n // 包含標準輸出入程式庫的標頭文件 \n #include <stdio.h> \n \xa0 \n // 主函式 \n int   main() { \n \xa0\xa0\xa0\xa0 // Open a file to write displacement and velocity data \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "motion_data.txt" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!outputFile) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to create data file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file \n \xa0\xa0\xa0\xa0 double   x = 0.2;\xa0  // Initial displacement \n \xa0\xa0\xa0\xa0 double   v = 0.0;\xa0  // Initial velocity \n \xa0\xa0\xa0\xa0 double   dt = 0.01;  // Time step \n \xa0\xa0\xa0\xa0 double   t = 0.0;\xa0  // Time \n \xa0 \n \xa0\xa0\xa0\xa0 while   (t <= 10.0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   acceleration = (-10.0 * x - 0.5 * v) / 1.0;  // Modified system parameters here \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 v += acceleration * dt; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 x += v * dt; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (outputFile,  "%lf %lf %lf\\n" , t, x, v); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 t += dt; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the data file \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0 \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'./../images/motion_plot.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set title \'Displacement and Velocity vs. Time\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set xlabel \'Time (s)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set ylabel \'Displacement (m)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe, "plot  \'motion_data.txt\'   using   1:2 with lines lw 2 title  \'Displacement\' , \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \'motion_data.txt\'   using   1:3 with lines lw 2 title  \'Velocity\' \\n"); \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the Gnuplot process \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "exit\\n" ); \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '1-2.html'}, {'title': '心得', 'text': '學習 C 語言的過程讓我深刻地體會到了程式設計的基礎重要性。學習起來雖然很辛苦，也奠定了我的程式設計基礎，磨練了邏輯思維。我期待未來的應用中能更深入地運用這門強而有力的語言。 \n', 'tags': '', 'url': '心得.html'}, {'title': 'w15', 'text': '', 'tags': '', 'url': 'w15.html'}, {'title': '第一部分', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n \n \n \n #include < stdio.h > \n #include < gd.h > \n #include < math.h > \n \xa0 \xa0 \n void draw_roc_flag(gdImagePtr img); \n void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n \xa0 \xa0 \n int main() { \n \xa0\xa0\xa0\xa0 // width 3: height 2 \n \xa0\xa0\xa0\xa0 int width = 1200; \n \xa0\xa0\xa0\xa0 // 國旗長寬比為 3:2 \n \xa0\xa0\xa0\xa0 int height = (int)(width * 2.0 / 3.0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 draw_roc_flag(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); \n \xa0\xa0\xa0\xa0 if (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr, "Error opening the output file.\\n"); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose(outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return 0; \n } \n \xa0 \xa0 \n void draw_roc_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int red, white, blue; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n \xa0\xa0\xa0\xa0 int center_x = (int)(width / 4); \n \xa0\xa0\xa0\xa0 int center_y = (int)(height / 4); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 int sun_radius = (int)(width / 8); \n \xa0\xa0\xa0\xa0 int white_circle_dia = sun_radius; \n \xa0\xa0\xa0\xa0 int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue); \n \xa0\xa0\xa0\xa0 draw_white_sun(img, center_x, center_y, sun_radius, white); \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // 在青天與滿地紅的圖案中以白色畫線繪製連接菱形的四個關鍵點 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(img, 10); // 設置線條粗度為10 \n \xa0\xa0\xa0\xa0 gdImageLine(img, 429, 125, 279, 165, white); \n \xa0\xa0\xa0\xa0 gdImageLine(img, 279, 165, 170, 274, white); \n \xa0\xa0\xa0\xa0 gdImageLine(img, 170, 274, 170, 274, white); \n \xa0\xa0\xa0\xa0 gdImageLine(img, 429, 125, 170, 274, white); // 加入第四條連線 \n } \n void draw_white_sun(gdImagePtr img, int x, int y, int size, int color) { \n \xa0\xa0\xa0\xa0 // 實現 draw_white_sun 函數的內容 \n \xa0\xa0\xa0\xa0 // 可以在此處繪製白日的內部圖案 \n } \n \n \n \n \n \n \n \n 1.先插入程式內容 \n 2.跳出六組A,B,E,D \n A coord: (375，70)\xa0 \xa0 \xa0  A coord: (429，125)\xa0 \xa0 \xa0A coord: (449，200)\xa0 \xa0 A coord: (429，275) \n B coord: (264，179)\xa0 \xa0 B\xa0coord: (279，165)\xa0 \xa0 \xa0B\xa0coord: (299，159)\xa0 \xa0 B\xa0coord: (319，165) \n E coord: (224，329)\xa0 \xa0 E\xa0coord: (170，274)\xa0 \xa0 \xa0 E\xa0coord: (150，199)\xa0 \xa0 E \xa0 coord: (170，124) \n D coord: (224，329)\xa0 \xa0 D\xa0coord: (170，274)\xa0 \xa0 \xa0D\xa0coord: (150，199)\xa0 \xa0 D\xa0coord: (170，124) \n 3.多加了56-59行的座標(共4點座標) \n 4.更改中間兩連接線條粗細度為10 \n 5.成品 \n \n', 'tags': '', 'url': '第一部分.html'}, {'title': '第二部分', 'text': '1. 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標. \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n 114 \n 115 \n 116 \n 117 \n 118 \n 119 \n 120 \n 121 \n 122 \n 123 \n 124 \n 125 \n 126 \n 127 \n 128 \n 129 \n 130 \n 131 \n 132 \n 133 \n 134 \n 135 \n 136 \n 137 \n 138 \n 139 \n 140 \n 141 \n 142 \n 143 \n 144 \n 145 \n 146 \n \n \n \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China  \n // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621  \n // cc roc_flag_in_gd.c -lgd -lm to link with gd and math library  \n // https://www.rapidtables.com/web/color/RGB_Color.html  \n // 幾何形狀著色與繪圖練習  \n // 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖  \n #include < stdio.h >  \n #include < gd.h >  \n #include < math.h >  \n \xa0\xa0 \xa0 \n void draw_roc_flag(gdImagePtr img);  \n void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);  \n \xa0\xa0 \xa0 \n int main() {  \n \xa0\xa0\xa0\xa0 // width 3: height 2  \n \xa0\xa0\xa0\xa0 int width = 1200;  \n \xa0\xa0\xa0\xa0 // 國旗長寬比為 3:2  \n \xa0\xa0\xa0\xa0 int height = (int)(width*2.0 / 3.0);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height);  \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 draw_roc_flag(img);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");  \n \xa0\xa0\xa0\xa0 if (outputFile == NULL) {  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf(stderr, "Error opening the output file.\\n");  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return 1;  \n \xa0\xa0\xa0\xa0 }  \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9);  \n \xa0\xa0\xa0\xa0 fclose(outputFile);  \n \xa0\xa0\xa0\xa0 gdImageDestroy(img);  \n \xa0\xa0\xa0\xa0 return 0;  \n }  \n void draw_roc_flag(gdImagePtr img) {  \n \xa0\xa0\xa0\xa0 int width = gdImageSX(img);  \n \xa0\xa0\xa0\xa0 int height = gdImageSY(img);  \n \xa0\xa0\xa0\xa0 int red, white, blue;  \n \xa0\xa0\xa0\xa0 // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處  \n \xa0\xa0\xa0\xa0 int center_x = (int)(width/4);  \n \xa0\xa0\xa0\xa0 int center_y = (int)(height/4);  \n \xa0\xa0\xa0\xa0 // gdImageFilledEllipse 需以長寬方向的 diameter 作圖  \n \xa0\xa0\xa0\xa0 // 由於中央白日圓形的半徑為青天寬度的 1/8  \n \xa0\xa0\xa0\xa0 // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8  \n \xa0\xa0\xa0\xa0 // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8  \n \xa0\xa0\xa0\xa0 int sun_radius = (int)(width/8);  \n \xa0\xa0\xa0\xa0 // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑  \n \xa0\xa0\xa0\xa0 int white_circle_dia = sun_radius;  \n \xa0\xa0\xa0\xa0 // 中央藍色圓形半徑為中央白日的 1又 2/15  \n \xa0\xa0\xa0\xa0 int blue_circle_dia = white_circle_dia +\xa0 white_circle_dia*2/15;  \n \xa0\xa0\xa0\xa0 // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值  \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 255, 0, 0); // 紅色  \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255); // 白色  \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色  \n \xa0\xa0\xa0\xa0 // 根據畫布大小塗上紅色長方形區域  \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red);  \n \xa0\xa0\xa0\xa0 // 青天面積為整面國旗的 1/4, 也是採用長方形塗色  \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);  \n \xa0\xa0 {int x1 = 429;  \n \xa0\xa0\xa0 int y1 = 125;  \n \xa0\xa0\xa0 int x2 = 279;  \n \xa0\xa0\xa0 int y2 = 165;  \n \xa0\xa0\xa0 gdImageSetThickness(img, 10); // 設置線條寬度為10 \n \xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white); // 畫線 \n \xa0\xa0\xa0 // 畫一條線連接兩個點  \n \xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white);  \n \xa0\xa0 }  \n \xa0\xa0 {int x1 = 170;  \n \xa0\xa0\xa0\xa0\xa0 int y1 = 274;  \n \xa0\xa0\xa0\xa0\xa0 int x2 = 279;  \n \xa0\xa0\xa0\xa0\xa0 int y2 = 165;  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0 // 畫一條線連接兩個點  \n \xa0\xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white);  \n \xa0\xa0 }  \n \xa0\xa0 {  \n \xa0\xa0\xa0\xa0 int x1 = 170;  \n \xa0\xa0\xa0\xa0\xa0 int y1 = 274;  \n \xa0\xa0\xa0\xa0\xa0 int x2 = 429;  \n \xa0\xa0\xa0\xa0\xa0 int y2 = 125;  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0 // 畫一條線連接兩個點  \n \xa0\xa0\xa0\xa0\xa0 gdImageLine(img, x1, y1, x2, y2, white);  \n \xa0\xa0 }  \n \xa0\xa0 // 利用一個藍色大圓與白色小圓畫出藍色環狀  \n \xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);  \n \xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);  \n \xa0\xa0 \xa0 \n \xa0\xa0 \xa0 \n \xa0\xa0 // 定義座標結構  \n \xa0\xa0 typedef struct {  \n \xa0\xa0\xa0\xa0\xa0\xa0 double x;  \n \xa0\xa0\xa0\xa0\xa0\xa0 double y;  \n \xa0\xa0 } Point;  \n \xa0\xa0 \xa0 \n \xa0\xa0 // 計算圓與線的交點  \n \xa0\xa0 void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {  \n \xa0\xa0\xa0\xa0\xa0\xa0 // 直線斜率  \n \xa0\xa0\xa0\xa0\xa0\xa0 double m = (y2 - y1) / (x2 - x1);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0 // 直線方程式中的常數項  \n \xa0\xa0\xa0\xa0\xa0\xa0 double b = y1 - m * x1;  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0 // 與直線交點的計算圓 \n \xa0\xa0\xa0\xa0\xa0\xa0 double A = 1 + pow(m, 2);  \n \xa0\xa0\xa0\xa0\xa0\xa0 double B = 2 * (m * b - m * k - h);  \n \xa0\xa0\xa0\xa0\xa0\xa0 double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0 // 判斷交點個數  \n \xa0\xa0\xa0\xa0 double discriminant = pow(B, 2) - 4 * A * C;  \n \xa0\xa0\xa0\xa0 if (discriminant > 0) {  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double y_intersect1 = m * x_intersect1 + b;  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);  \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double y_intersect2 = m * x_intersect2 + b;  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);  \n \xa0\xa0\xa0\xa0 } else if (discriminant == 0) {  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double x_intersect = -B / (2 * A);  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double y_intersect = m * x_intersect + b;  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);  \n \xa0\xa0\xa0\xa0 } else {  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf("No points.\\n");  \n \xa0\xa0\xa0\xa0 }  \n \xa0\xa0 \xa0 \n \xa0\xa0 }  \n \xa0\xa0\xa0\xa0\xa0\xa0 // 圓的參數  \n \xa0\xa0\xa0\xa0\xa0\xa0 double circle_x = (int)(width/4); // 圓心 x 座標  \n \xa0\xa0\xa0\xa0\xa0\xa0 double circle_y = (int)(height/4); // 圓心 y 座標  \n \xa0\xa0\xa0\xa0\xa0\xa0 double radius = white_circle_dia +\xa0 white_circle_dia*2/15; // 圓半徑  \n \xa0\xa0\xa0\xa0\xa0\xa0 // 兩點座標  \n \xa0\xa0 double x3 = 170;  \n \xa0\xa0 double y3 = 274;  \n \xa0\xa0 double x4 = 279;  \n \xa0\xa0 double y4 = 165;  \n \xa0\xa0 \xa0 \n \xa0\xa0 circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);  \n \xa0\xa0 \xa0 \n \xa0\xa0 double x5 = 279;  \n \xa0\xa0 double y5 = 165;  \n \xa0\xa0 double x6 = 429;  \n \xa0\xa0 double y6 = 125;  \n \xa0\xa0 \xa0 \n \xa0\xa0 circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);  \n \xa0\xa0 } \n \n \n \n \n \n 1.計算圓與線的交點 \n \xa0 \xa0 直線斜率 \n \xa0 \xa0 直線方程式中的常數項 \n \xa0 \xa0 與直線交點的計算圓 \n \xa0 \xa0 計算圓與線的交點 \n 2.設定座標參數 \n 交點: (388.90, 55.10) 交點: (155.10, 288.90) 交點: (449.72, 119.47) 交點: (130.07, 204.72) \n', 'tags': '', 'url': '第二部分.html'}, {'title': '課程評分', 'text': '線上測驗、期中網站與簡報、期末網站與簡報. \n 線上測驗: \n 建立帳號後 ( 請將密碼寫入手機的備忘錄 ), 每週不定時進行. \n 期中網站評分與簡報: \n 期中考前兩週開始進行. \n 期末網站評分與簡報: \n 期末考前兩週開始進行. \n 期中成績計算: \n 期中考與之前各週線上測驗成績平均 \n 學期成績計算: \n (期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20% \n get_score_from_exam_json.py \n read_only_the_score.py \n', 'tags': '', 'url': '課程評分.html'}, {'title': 'Brython', 'text': "\n \n \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers \xa0 (整數 int(), 浮點數 float()) \n Strings \xa0 (字串) \n print (Python 內建函式, \xa0 print() \xa0 函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt \xa0 動態頁面超文件). \n practice_html.txt \xa0 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 \xa0 class \xa0 後, 在範例導入時透過 \xa0 instance \xa0 引用. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n <!-- 啟動 Brython --> \n < script > \n window.onload=function(){ \n brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); \n } \n </ script > \n \n \n \n \n \n \n \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator \xa0 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n \n \n \n \n \n \n \n sum   =   1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 \n print ( sum ) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n \n \n \n \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n \n \n \n \n \n \n \n sum   =   1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 \n print ( sum ) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n", 'tags': '', 'url': 'Brython.html'}]};